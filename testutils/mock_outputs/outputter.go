// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/outputs/interfaces.go

// Package mock_outputs is a generated GoMock package.
package mock_outputs

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clogger "github.com/sinkingpoint/clogger/internal/clogger"
	outputs "github.com/sinkingpoint/clogger/internal/outputs"
)

// MockOutputter is a mock of Outputter interface.
type MockOutputter struct {
	ctrl     *gomock.Controller
	recorder *MockOutputterMockRecorder
}

// MockOutputterMockRecorder is the mock recorder for MockOutputter.
type MockOutputterMockRecorder struct {
	mock *MockOutputter
}

// NewMockOutputter creates a new mock instance.
func NewMockOutputter(ctrl *gomock.Controller) *MockOutputter {
	mock := &MockOutputter{ctrl: ctrl}
	mock.recorder = &MockOutputterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputter) EXPECT() *MockOutputterMockRecorder {
	return m.recorder
}

// FlushToOutput mocks base method.
func (m *MockOutputter) FlushToOutput(ctx context.Context, messages *clogger.MessageBatch) (outputs.OutputResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushToOutput", ctx, messages)
	ret0, _ := ret[0].(outputs.OutputResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushToOutput indicates an expected call of FlushToOutput.
func (mr *MockOutputterMockRecorder) FlushToOutput(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushToOutput", reflect.TypeOf((*MockOutputter)(nil).FlushToOutput), ctx, messages)
}

// GetSendConfig mocks base method.
func (m *MockOutputter) GetSendConfig() outputs.SendConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendConfig")
	ret0, _ := ret[0].(outputs.SendConfig)
	return ret0
}

// GetSendConfig indicates an expected call of GetSendConfig.
func (mr *MockOutputterMockRecorder) GetSendConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendConfig", reflect.TypeOf((*MockOutputter)(nil).GetSendConfig))
}
