// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/outputs/interfaces.go

// Package mock_outputs is a generated GoMock package.
package mock_outputs

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clogger "github.com/sinkingpoint/clogger/internal/clogger"
	outputs "github.com/sinkingpoint/clogger/internal/outputs"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// FlushToOutput mocks base method.
func (m *MockSender) FlushToOutput(ctx context.Context, messages []clogger.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushToOutput", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushToOutput indicates an expected call of FlushToOutput.
func (mr *MockSenderMockRecorder) FlushToOutput(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushToOutput", reflect.TypeOf((*MockSender)(nil).FlushToOutput), ctx, messages)
}

// GetSendConfig mocks base method.
func (m *MockSender) GetSendConfig() outputs.SendConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendConfig")
	ret0, _ := ret[0].(outputs.SendConfig)
	return ret0
}

// GetSendConfig indicates an expected call of GetSendConfig.
func (mr *MockSenderMockRecorder) GetSendConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendConfig", reflect.TypeOf((*MockSender)(nil).GetSendConfig))
}
